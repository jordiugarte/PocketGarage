Index: app/src/main/java/bo/com/golpistasElectricistas/pocketGarage/repository/firebase/storage/FirebaseStorageManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package bo.com.golpistasElectricistas.pocketGarage.repository.firebase.storage;\r\n\r\nimport android.net.Uri;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.lifecycle.LiveData;\r\nimport androidx.lifecycle.MutableLiveData;\r\n\r\nimport com.google.android.gms.tasks.Continuation;\r\nimport com.google.android.gms.tasks.OnCompleteListener;\r\nimport com.google.android.gms.tasks.Task;\r\nimport com.google.firebase.storage.FirebaseStorage;\r\nimport com.google.firebase.storage.StorageReference;\r\nimport com.google.firebase.storage.UploadTask;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport bo.com.golpistasElectricistas.pocketGarage.model.Article;\r\nimport bo.com.golpistasElectricistas.pocketGarage.model.Base;\r\nimport bo.com.golpistasElectricistas.pocketGarage.utils.Constants;\r\n\r\npublic class FirebaseStorageManager {\r\n    private StorageReference storage;\r\n\r\n    public FirebaseStorageManager() {\r\n        storage = FirebaseStorage.getInstance().getReference();\r\n    }\r\n\r\n    public LiveData<Base<String>> uploadArticleImages(int articleId, List<Uri> images) {\r\n        MutableLiveData<Base<String>> results = new MutableLiveData<>();\r\n        new Thread(() -> {\r\n            try {\r\n                Thread.sleep(10000);\r\n                results.postValue(new Base<>(\"https://saboryestilo.com.mx/wp-content/uploads/2020/05/parrilla-argentina-1-1200x720.jpg\"));\r\n            } catch (InterruptedException e) {\r\n                e.printStackTrace();\r\n            }\r\n        }).start();\r\n        return results;\r\n    }\r\n\r\n    public LiveData<Base<String>> uploadUserImage(String uuidUser, Uri image) {\r\n        String path = \"users/\" + uuidUser + \".jpg\";\r\n        return this.uploadImage(path, image);\r\n    }\r\n\r\n    public LiveData<Base<List<String>>> uploadArticleImages(Article article, List<Uri> photos) {\r\n        List<String> tempPaths = new ArrayList<>();\r\n        for (int i = 0; i < photos.size(); i++) {\r\n            tempPaths.add(\"images/\" + article.getArticleId() + \"/\" + i + \".jpg\");\r\n        }\r\n        return this.uploadImages(tempPaths, photos);\r\n    }\r\n\r\n    private LiveData<Base<List<String>>> uploadImages(List<String> paths, List<Uri> photos) {\r\n        MutableLiveData<Base<List<String>>> results = new MutableLiveData<>();\r\n        List<String> totalResults = new ArrayList<>();\r\n        for (int i = 0; i < paths.size(); i++) {\r\n            MutableLiveData<Base<String>> result = new MutableLiveData<>();\r\n            StorageReference ref = storage.child(paths.get(i));\r\n            UploadTask uploadTask = ref.putFile(photos.get(i));\r\n            uploadTask.continueWithTask(new Continuation<UploadTask.TaskSnapshot, Task<Uri>>() {\r\n                @Override\r\n                public Task<Uri> then(@NonNull Task<UploadTask.TaskSnapshot> task) throws Exception {\r\n                    if (!task.isSuccessful()) {\r\n                        throw task.getException();\r\n                    }\r\n                    return ref.getDownloadUrl();\r\n                }\r\n            }).addOnCompleteListener(new OnCompleteListener<Uri>() {\r\n                @Override\r\n                public void onComplete(@NonNull Task<Uri> task) {\r\n                    if (task.isSuccessful()) {\r\n                        Uri downloadUri = task.getResult();\r\n                        result.postValue(new Base<>(downloadUri.toString()));\r\n                        totalResults.add(downloadUri.toString());\r\n                    } else {\r\n                        result.postValue(new Base<>(Constants.ERROR_UPLOAD_IMAGE, task.getException()));\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        results.postValue(new Base<>(totalResults));\r\n\r\n        return results;\r\n    }\r\n\r\n    private LiveData<Base<String>> uploadImage(String path, Uri image) {\r\n        MutableLiveData<Base<String>> results = new MutableLiveData<>();\r\n        StorageReference ref = storage.child(path);\r\n        UploadTask uploadTask = ref.putFile(image);\r\n        uploadTask.continueWithTask(new Continuation<UploadTask.TaskSnapshot, Task<Uri>>() {\r\n            @Override\r\n            public Task<Uri> then(@NonNull Task<UploadTask.TaskSnapshot> task) throws Exception {\r\n                if (!task.isSuccessful()) {\r\n                    throw task.getException();\r\n                }\r\n                return ref.getDownloadUrl();\r\n            }\r\n        }).addOnCompleteListener(new OnCompleteListener<Uri>() {\r\n            @Override\r\n            public void onComplete(@NonNull Task<Uri> task) {\r\n                if (task.isSuccessful()) {\r\n                    Uri downloadUri = task.getResult();\r\n                    results.postValue(new Base<>(downloadUri.toString()));\r\n                } else {\r\n                    results.postValue(new Base<>(Constants.ERROR_UPLOAD_IMAGE, task.getException()));\r\n                }\r\n            }\r\n        });\r\n        return results;\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/bo/com/golpistasElectricistas/pocketGarage/repository/firebase/storage/FirebaseStorageManager.java	(revision ee74abc0a557c5a702cb000cb1ceb31b2648bce4)
+++ app/src/main/java/bo/com/golpistasElectricistas/pocketGarage/repository/firebase/storage/FirebaseStorageManager.java	(date 1604640163753)
@@ -81,7 +81,7 @@
                 }
             });
         }
-        results.postValue(new Base<>(totalResults));
+        results.postValue(new Base<>totalResults);
 
         return results;
     }
