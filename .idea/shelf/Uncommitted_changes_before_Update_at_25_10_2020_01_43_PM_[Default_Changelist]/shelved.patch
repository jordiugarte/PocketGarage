Index: app/src/main/java/bo/com/golpistasElectricistas/pocketGarage/repository/Repository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package bo.com.golpistasElectricistas.pocketGarage.repository;\r\n\r\nimport android.app.Application;\r\nimport android.util.Log;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.lifecycle.LiveData;\r\nimport androidx.lifecycle.MutableLiveData;\r\nimport androidx.lifecycle.Observer;\r\n\r\nimport com.google.gson.Gson;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport bo.com.golpistasElectricistas.pocketGarage.model.Article;\r\nimport bo.com.golpistasElectricistas.pocketGarage.model.Base;\r\nimport bo.com.golpistasElectricistas.pocketGarage.model.Post;\r\nimport bo.com.golpistasElectricistas.pocketGarage.model.User;\r\nimport bo.com.golpistasElectricistas.pocketGarage.repository.api.ApiRepository;\r\nimport bo.com.golpistasElectricistas.pocketGarage.repository.firebase.Firebase;\r\nimport bo.com.golpistasElectricistas.pocketGarage.repository.local.Local;\r\nimport bo.com.golpistasElectricistas.pocketGarage.utils.ErrorMapper;\r\n\r\npublic class Repository implements RepositoryImpl {\r\n    private Local local;\r\n\r\n    public Repository(Application application) {\r\n        local = new Local(application);\r\n    }\r\n\r\n    @Override\r\n    public LiveData<Base<User>> login(String email, String password) {\r\n        return Firebase.getInstance().login(email, password);\r\n    }\r\n\r\n    @Override\r\n    public LiveData<Base<List<Article>>> getArticlesItems() {\r\n        MutableLiveData<Base<List<Article>>> result = new MutableLiveData<>();\r\n        ApiRepository.getInstance().getArticles().observeForever(new Observer<Base<List<Article>>>() {\r\n            @Override\r\n            public void onChanged(Base<List<Article>> listBase) {\r\n                if (listBase.isSuccess()) {\r\n                    result.postValue(listBase);\r\n                }\r\n            }\r\n        });\r\n        return result;\r\n    }\r\n\r\n    @Override\r\n    public Article getArticleItem(int id) {\r\n        List<Article> articles = getArticlesItems().getValue().getData();\r\n        for (Article article : articles) {\r\n            if (article.getArticleId() == id) {\r\n                return article;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    @Override\r\n    public LiveData<Base<List<Article>>> getFavorites() {\r\n        MutableLiveData<Base<List<Article>>> result = new MutableLiveData<>();\r\n        local.getFavorites().observeForever(new Observer<List<Article>>() {\r\n            @Override\r\n            public void onChanged(List<Article> articles) {\r\n                result.postValue(new Base<>(articles));\r\n            }\r\n        });\r\n        ApiRepository.getInstance().getArticles().observeForever(new Observer<Base<List<Article>>>() {\r\n            @Override\r\n            public void onChanged(Base<List<Article>> listBase) {\r\n                if (listBase.isSuccess()) {\r\n                    result.postValue(listBase);\r\n                    local.update(listBase.getData());\r\n                }\r\n            }\r\n        });\r\n        return result;\r\n    }\r\n\r\n    @Override\r\n    public LiveData<Base<List<Article>>> getMyArticles() {\r\n        return null;\r\n    }\r\n\r\n    @Override\r\n    public LiveData<Base<List<Post>>> getPosts() {\r\n        MutableLiveData<Base<List<Post>>> result = new MutableLiveData<>();\r\n        ApiRepository.getInstance().getArticles().observeForever(new Observer<Base<List<Article>>>() {\r\n            @Override\r\n            public void onChanged(Base<List<Article>> listBase) {\r\n                if (listBase.isSuccess()) {\r\n                    List<Article> articles = listBase.getData();\r\n                    Base<List<Post>> posts = null;\r\n                    for (Article article : articles) {\r\n                        Post post = new Post(article.getArticleId(), article.getPhotos().get(0), article.getShortDescription(), article.getTitle(), article.getPrice());\r\n                        posts.getData().add(post);\r\n                    }\r\n                    result.postValue(posts);\r\n                }\r\n            }\r\n        });\r\n        return result;\r\n    }\r\n\r\n    @Override\r\n    public LiveData<Base<User>> register(String photo, String ci, String email, String\r\n            pass, String name, String lastName, String date) {\r\n        return null;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/bo/com/golpistasElectricistas/pocketGarage/repository/Repository.java	(revision 0aad3e817fc4041db9fef51f8ced61cfa06fb58b)
+++ app/src/main/java/bo/com/golpistasElectricistas/pocketGarage/repository/Repository.java	(date 1603647815326)
@@ -93,7 +93,7 @@
             public void onChanged(Base<List<Article>> listBase) {
                 if (listBase.isSuccess()) {
                     List<Article> articles = listBase.getData();
-                    Base<List<Post>> posts = null;
+                    Base<List<Post>> posts;
                     for (Article article : articles) {
                         Post post = new Post(article.getArticleId(), article.getPhotos().get(0), article.getShortDescription(), article.getTitle(), article.getPrice());
                         posts.getData().add(post);
